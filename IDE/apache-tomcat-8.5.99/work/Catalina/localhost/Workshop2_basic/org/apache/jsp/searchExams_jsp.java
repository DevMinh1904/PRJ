/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.99
 * Generated at: 2025-03-20 03:04:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import dto.ExamCategoryDTO;
import dto.ExamDTO;
import utils.AuthUtils;

public final class searchExams_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("utils.AuthUtils");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("dto.ExamCategoryDTO");
    _jspx_imports_classes.add("dto.ExamDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Search Exams</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

            Object categoryIdObj = request.getAttribute("categoryId");
            String categoryId = null;
            if (categoryIdObj != null) {
                if (categoryIdObj instanceof Integer) {
                    categoryId = String.valueOf((Integer) categoryIdObj);
                } else if (categoryIdObj instanceof String) {
                    categoryId = (String) categoryIdObj;
                }
            }

            HttpSession currentSession = request.getSession(false); // Use false to get session
            boolean isStudent = (currentSession != null) && AuthUtils.isStudent(currentSession);
            boolean isLoggedin = (currentSession != null) && AuthUtils.isLoggedIn(currentSession);

        
      out.write("\n");
      out.write("\n");
      out.write("        <h1>Search Exams</h1>\n");
      out.write("\n");
      out.write("        <form action=\"controller\" method=\"POST\">\n");
      out.write("            <input type=\"text\" name=\"search\" placeholder=\"Search Exams\">\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"search\">\n");
      out.write("\n");
      out.write("            <input type=\"submit\" value=\"Search\">\n");
      out.write("\n");
      out.write("        </form>\n");
      out.write("        ");
 if (isLoggedin) {
      out.write("\n");
      out.write("        <form action=\"controller\" method=\"POST\">\n");
      out.write("\n");
      out.write("            <select name=\"categoryId\" onchange=\"this.form.submit()\">\n");
      out.write("                <option value=\"\">Select Category</option>\n");
      out.write("                ");

                    List<ExamCategoryDTO> categories = (List<ExamCategoryDTO>) request.getAttribute("EXAM_CATEGORIES");
                    if (categories != null) {
                        for (ExamCategoryDTO category : categories) {
                
      out.write("\n");
      out.write("                <option value=\"");
      out.print( category.getCategoryId());
      out.write('"');
      out.write(' ');
      out.print( categoryId != null && categoryId.equals(String.valueOf(category.getCategoryId())) ? "selected" : "");
      out.write('>');
      out.print( category.getCategoryName());
      out.write("</option>\n");
      out.write("                ");

                        }
                    }
                
      out.write("\n");
      out.write("            </select>\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"searchExams\">\n");
      out.write("\n");
      out.write("        </form>\n");
      out.write("        ");
 }
      out.write("\n");
      out.write("\n");
      out.write("        <table border=\"1\">\n");
      out.write("            <thead>\n");
      out.write("                <tr>\n");
      out.write("                    <th>Exam Title</th>\n");
      out.write("                    <th>Subject</th>\n");
      out.write("                    <th>Total Marks</th>\n");
      out.write("                    <th>Duration (minutes)</th>\n");
      out.write("                        ");
 if (!isStudent) { 
      out.write("\n");
      out.write("                    <th>Category ID</th>\n");
      out.write("                    <th>Actions</th>\n");
      out.write("                        ");
 } else { 
      out.write("\n");
      out.write("                    <th>Action</th>\n");
      out.write("                        ");
 }
      out.write("\n");
      out.write("\n");
      out.write("                </tr>\n");
      out.write("            </thead>\n");
      out.write("            <tbody>\n");
      out.write("                ");
  List<ExamDTO> exams = (List<ExamDTO>) request.getAttribute("EXAM_LIST");
                    if (exams != null && !exams.isEmpty()) {
                        for (ExamDTO exam : exams) {
                
      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td>");
      out.print( exam.getExamTitle());
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( exam.getSubject());
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( exam.getTotalMarks());
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( exam.getDuration());
      out.write("</td>\n");
      out.write("                    ");
 if (!isStudent) {
      out.write("\n");
      out.write("                    <td>");
      out.print( exam.getCategoryId());
      out.write("</td>\n");
      out.write("                    <td>\n");
      out.write("\n");
      out.write("                        \n");
      out.write("                    </td>\n");
      out.write("                    ");
 } else {
      out.write("\n");
      out.write("\n");
      out.write("                    <td>\n");
      out.write("                        \n");
      out.write("                    </td>\n");
      out.write("                    ");
 }
      out.write("\n");
      out.write("                </tr>\n");
      out.write("                ");

                    }
                } else {
                
      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td colspan=\"5\">No exams found.</td>\n");
      out.write("                </tr>\n");
      out.write("                ");

                    }
                
      out.write("\n");
      out.write("            </tbody>\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        <form action=\"controller\" method=\"GET\">\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"direct\">\n");
      out.write("            <input type=\"hidden\" name=\"direct\" value=\"dashboard.jsp\">\n");
      out.write("            <input type=\"submit\" value=\"Back to Dashboard\">\n");
      out.write("        </form>\n");
      out.write("        ");

            String message = (String) request.getAttribute("message");
            if (message != null) {
        
      out.write("\n");
      out.write("        <p style=\"color:green;\">");
      out.print( message);
      out.write("</p>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("        ");

            String errorMessage = (String) request.getAttribute("errorMessage");
            if (errorMessage != null) {
        
      out.write("\n");
      out.write("        <p style=\"color:red;\">");
      out.print( errorMessage);
      out.write("</p>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
